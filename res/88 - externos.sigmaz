define versao : int = 1  ;
mockiz guardado : int = 6  ;

func ateOnde ( a : int ) : int  {
	
	if ( a == 1 ) ->  {
		return -1  ;
	}

	DEBUG -> REGRESSIVE :: ALL  ;
	return 0  ;
}

operator == ( a : int , b : int ) : bool  {
	reg @ R5 -> a  ;
	reg @ R6 -> b  ;
	
	PROC ->  {
		SET R1  ;
		MOV FALSE  ;
		OPE R5 EQUAL R6  ;
	}

	return reg @ R1  ;
}

operator ++ ( a : int , b : int ) : int  {
	reg @ R5 -> a  ;
	reg @ R6 -> b  ;
	
	PROC ->  {
		SET R7  ;
		MOV 0  ;
		OPE R5 ADD R6  ;
	}

	return reg @ R7  ;
}
#refer Caixas; refer Linhas ;

call Escopos ->  {
	def A : int = 12  ;
	def B : int = Geral -> CAMPO  ;
	#def C : int = Vermelha->VALOR; def l1 : Linha_Branca = init Linha_Branca ( );
	DEBUG -> REGRESSIVE :: ALL  ;
}
struct Geral  {
	explicit :
		define CAMPO : int = 10  ;
}
package Caixas  {
	struct Vermelha  {
		explicit :
			define VALOR : int = 30  ;
	}
	struct Azul  {
		explicit :
			define VALOR : int = 40  ;
	}
}
package Linhas  {
	refer Caixas  ;
	struct Linha_Branca  {
		
		init Linha_Branca ( )  {
			Valor = Vermelha -> VALOR  ;
			DEBUG -> REGRESSIVE :: ALL  ;
		}
		all :
			define Valor : int = 0  ;
	}
}