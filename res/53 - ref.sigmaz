call iniciar -> inicio ( );

act inicio ( ) {
	def w : num = 5;
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	passador ( w );
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	referenciador ( w );
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	def t : num = -1;
	janelador ( t );
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	ref_janelador ( t );
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	
	#ref_janelador(ale());
	
	#invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
	moc X : num = 3;
	
	#ref_janelador(X);
	
}

act passador ( a : num ) {
	a = 10;
}

act referenciador ( ref a : num ) {
	a = 10;
}
func janelador ( a : num ) : bool {
	a = 10;
	return true;
}
func ref_janelador ( ref a : num ) : bool {
	a = 10;
	return true;
}
func ale ( ) : num {
	return 3;
}
