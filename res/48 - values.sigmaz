
operation ++ ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum ( a , b ) :: c;
	return c;
}

operation -- ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sub ( a , b ) :: c;
	return c;
}

operation ** ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_mux( a , b ) :: c;
	return c;
}

operation // ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_div ( a , b ) :: c;
	return c;
}

call iniciar -> inicio ( );


act inicio ( ) {

    def a : num = 10 ++ 20;

    def b : num = (10 ++ 20) ++ 10;

    def c : num = 50 -- ((30++20) -- 10);

    def d : num = acionar(10++10,20++20);

    def e : num = acionar(10++(10++30),20++20);


	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: ALL;
}

func acionar(a:num,b:num) : num{

    return a ++ b;

}
