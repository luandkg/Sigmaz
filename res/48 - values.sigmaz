operator ++ ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_sum_int ( a , b ) :: c;
	return c;
}
operator -- ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_sub_int ( a , b ) :: c;
	return c;
}
operator ** ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_mux_int ( a , b ) :: c;
	return c;
}
operator // ( a : int , b : int ) : int {
	def c : num;
	invoke math -> operator_div_int ( a , b ) :: c;
	return c;
}
operator == ( a : int , b : int ) : bool {
	def c : bool;
	invoke math -> operator_equal_int ( a , b ) :: c;
	return c;
}
operator == ( a : bool , b : bool ) : bool {
	def c : bool;
	invoke math -> operator_match ( a , b ) :: c;
	return c;
}
call iniciar -> inicio ( );
act inicio ( ) {
	def a : int = 10 ++ 20;
	def b : int = ( 10 ++ 20 ) ++ 10;
	def c : int = 50 -- ( ( 30 ++ 20 ) -- 10 );
	def d : int = acionar ( 10 ++ 10 , 20 ++ 20 );
	def e : int = acionar ( 10 ++ ( 10 ++ 30 ) , 20 ++ 20 );
	def f : bool = ! true;
	def g : bool = ! 10 == 10;
	def h : bool = ! false == ( 10 == 20 );
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: ALL;
}
func acionar ( a : int , b : int ) : int {
	return a ++ b;
}
director ! ( a : bool ) : bool {
	invoke casting -> inverse ( a ) :: a;
	return a;
}

director ! ( a : int ) : int {
		def c : int;
    	invoke math -> operator_mux_int ( a , -1 ) :: c;
    	return c;
}
