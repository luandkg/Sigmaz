package Terminal {

    struct Terminal{
	extern: act println ( a : string , b : num ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
		invoke terminal -> print ( b ) :: c;
	}
	}
}
package Blocos {

	refer Terminal;

	stages MODOS -> {
		CLARO , DOIS , TRES , QUATRO 
	}



	struct XACC {
		all : 
		mockiz XAT : num = 12;
	}

	struct BGeral with XACC {
		init BGeral ( a : num ) {
			_a = a;
		}
		restrict : 
		define _a : num = 0;
		all : 
		func getA ( ) : num {
			return _a;
		}
		
	}
        struct Blocos{
		extern: act Blocar ( a : num , b : num ) {

		    invoke __COMPILER__ -> SHOW_SCOPE ( ) :: EXTERNS;
    		Terminal->println ( " -->> Valor A : ", a );
    	}
}

	external BRUTAL {
		act FORCAR ( ) {
			
		}
		
	}
	
}


struct Crivar{


}



refer Blocos;
refer Terminal;

call iniciar -> {
	#invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: PACKAGES;
	#invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STRUCTS;

    #invoke __COMPILER__ -> SHOW_SCOPE ( ) :: ALL;
	#invoke __COMPILER__ -> SHOW_SCOPE ( ) :: EXTERNS;

	Terminal->println ( " -->> Valorando : ", 12 );


	def m : MODOS = MODOS :: QUATRO;

	Terminal->println ( " -->> Valorando : ", 30 );

	#invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;

	Blocos->Blocar ( 3 , 2 );


	Blocos->Blocar ( 5 , 1 );
	def bg : BGeral = init BGeral ( 15 );
	Blocos->Blocar ( 7 , 1 );
	def bga : num = bg.getA ( );
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK;
}
