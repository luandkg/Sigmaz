package Blocos {
	struct VALORADO in ( T ) {
		restrict : 
		define mValor : T = null;
		all : 
		init VALORADO ( a : T ) {
			mValor = a;
		}
		
	}

	struct CX in ( T ) with VALORADO {
		
		#struct CX in ( T ) with VALORADO >> ( T ) {
		all : 
		init CX ( a : T ) -> VALORADO ( a ) {
			
		}
		
	}

	struct CXA in ( T ) with CX {
		init CXA ( eValor : T ) -> CX ( eValor ) {
			
		}
		all : 
		func getValor ( ) : T {
			return this.mValor;
		}

		act aumentar ( eValor : T ) {
			this.mValor = mValor ++ eValor;
		}

		act diminuir ( eValor : T ) {
			this.mValor = mValor -- eValor;
		}
		operator ++ ( a : CXA >> ( T ) , b : CXA >> ( T ) ) : CXA >> ( T ) {
			def tt : T = a.getValor ( ) ++ b.getValor ( );
			invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
			return init CXA ( tt ) >> ( T );
		}
		director ! ( a : CXA >> ( T ) ) : CXA {
			return init CXA ( a.getValor ( ) ** ( -1.0 ) ) >> ( T );
		}
		
	}
	
}
func azucrinar ( a : bool ) : num {
	return -1.0;
}
func azucrinar ( a : num , b : num ) : num {
	return -1.0;
}
operator ++ ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum_num ( a , b ) :: c;
	return c;
}
operator -- ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sub_num ( a , b ) :: c;
	return c;
}
operator ** ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_mux_num ( a , b ) :: c;
	return c;
}
refer Blocos;
call iniciar -> {
	def a1 : CXA >> ( num ) = init CXA ( 12.0 ) >> ( num );
	def a2 : CXA >> ( num ) = init CXA ( 18.0 ) >> ( num );
	def a1_valor : num = a1.getValor ( );
	def a2_valor : num = a2.getValor ( );
	def tt : bool = true;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def a3 : CXA >> ( num ) = a1 ++ a2;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def a3_valor : num = a3.getValor ( );
	def a4 : CXA >> ( num ) = ! a3;
	def a4_valor : num = a4.getValor ( );
	a4.aumentar ( 10.0 );
	def a4_valor2 : num = a4.getValor ( );
	
	#  def a : string = a4;
	def r : num = azucrinar ( 1.0 , 2.0 );
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
}
