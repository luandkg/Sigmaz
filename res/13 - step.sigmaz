call iniciar -> operando ( )  ;

act operando ( )  {
	def cc : int = 0  ;
	step cc :: ( 0 , 10 , somar ( cc , 1 ) ) -> 
		{
			def ac : int = cc  ;
			println ( "ANTES : ", ac )  ;
			
			if ( ac == 8 ) ->  {
				println ( " - SAINDO : ", ac )  ;
				cancel  ;
			}
		
			
			if ( ac == 5 ) ->  {
				println ( " - PULANDO : ", ac )  ;
				continue  ;
			}
		
			
			if ( ac == 3 ) ->  {
				println ( " - TERCERIZANDO : ", ac )  ;
			} other ( ac == 4 ) ->  {
				println ( " - QUARTANDO : ", ac )  ;
			} others  {
				println ( " - OUTROS : ", ac )  ;
				
				if ( ac == 7 ) ->  {
					println ( " - SEPTANDO : ", ac )  ;
					continue  ;
				}
			}
		
			println ( "DEPOIS : ", ac )  ;
		} }
	func somar ( a : int , b : int ) : int 
		{
			reg @ R5 -> a  ;
			reg @ R6 -> b  ;
			
			PROC ->  {
				SET R7  ;
				MOV 0  ;
				OPE R5 ADD R6  ;
			}
		
			return reg @ R7  ;
		}act println ( a : string , b : int ) 
		{
			reg @ R13 -> a  ;
			reg @ R5 -> b  ;
			
			PROC ->  {
				INVOKE CHANGE_LINE  ;
				PRINT R13  ;
				SET R13  ;
				MOV "" ;
				INT_STRING R5  ;
				PRINT R13  ;
			}
		
		}func menor ( a : int , b : int ) : bool 
		{
			reg @ R5 -> a  ;
			reg @ R6 -> b  ;
			
			PROC ->  {
				SET R1  ;
				MOV FALSE  ;
				OPE R5 LESS R6  ;
			}
		
			return reg @ R1  ;
		}operator == ( a : int , b : int ) : bool 
		{
			reg @ R5 -> a  ;
			reg @ R6 -> b  ;
			
			PROC ->  {
				SET R1  ;
				MOV FALSE  ;
				OPE R5 EQUAL R6  ;
			}
		
			return reg @ R1  ;
		}