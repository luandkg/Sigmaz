stages Tipos -> {
	ALFA , BETA , ZETA 
}

struct Pessoa {
	all : 
	    define privado : num = somar_inteiro ( 30.0 , 20.0 );
	explicit :
	    define publico : num = Pessoa -> vazar ( 10.0 , 10.0 );
	    define tipo : Tipos = Tipos :: ALFA;
	explicit :
	    func vazar ( a : num , b : num ) : num {
		    def c : num;
		    invoke math -> operator_sum_num ( a , b ) :: c;
		    invoke casting -> cast_integer_num ( c ) :: c;
		    return c;
	    }
	
}
call iniciar -> inicio ( );
act inicio ( ) {
	def pa : num = 10.0;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def valor : num = Pessoa -> publico;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def P1 : Pessoa = init Pessoa ( );
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	invoke __COMPILER__ -> UNIQUE_STRUCT ( P1 ) :: ALL;
	Pessoa -> publico = 2.0;
	Pessoa -> tipo = Tipos :: ZETA;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
}
func somar_inteiro ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum_num ( a , b ) :: c;
	invoke casting -> cast_integer_num ( c ) :: c;
	return c;
}
