stages Tipos -> {
	ALFA , BETA , ZETA 
}

struct Pessoa {
	all : 
	define privado : num = somar_inteiro ( 30.0 , 20.0 );
	explicit : define publico : num = Pessoa -> vazar ( 10.0 , 10.0 );
	define tipo : Tipos = Tipos :: ALFA;
	explicit : func vazar ( a : num , b : num ) : num {
		reg @ R9 -> a;
		reg @ R10 -> b;
		PROC -> {
			SET R11;
			MOV 0.0;
			OPE R9 SAX R10;
		}
		return reg @ R11;
	}
	
}
call iniciar -> inicio ( );
act inicio ( ) {
	def pa : num = 10.0;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def valor : num = Pessoa -> publico;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	def P1 : Pessoa = init Pessoa ( );
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
	invoke __COMPILER__ -> UNIQUE_STRUCT ( P1 ) :: ALL;
	Pessoa -> publico = 2.0;
	Pessoa -> tipo = Tipos :: ZETA;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
}
func somar_inteiro ( a : num , b : num ) : num {
	reg @ R9 -> a;
	reg @ R10 -> b;
	PROC -> {
		SET R11;
		MOV 0.0;
		OPE R9 SAX R10;
	}
	return reg @ R11;
}
