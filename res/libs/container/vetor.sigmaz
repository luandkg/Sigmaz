package Vetor {

    refer Item;

	struct Vetor in ( T ) {
		init Vetor ( eTamanho : int ) {
			if ( maior_igual ( eTamanho , 0 ) ) -> {
				mQuantidade = 0;
				def novo : T = null;
				while ( menor ( mQuantidade , eTamanho ) ) -> {
					
					# println("Comecar Vetorizar :: ",mQuantidade);
					
					#println("Adicionando :: ",mQuantidade);
					if ( isNull ( mPrimeiro ) ) -> {
						mPrimeiro = init Item ( ) >> ( T );
						mPrimeiro.setValor ( novo );
						mUltimo = mPrimeiro;
						mQuantidade = 1;
					}others {
						def mCorrente : Item >> ( T ) = init Item ( ) >> ( T );
						mCorrente.setValor ( novo );
						mUltimo.setProximo ( mCorrente );
						mUltimo = mCorrente;
						mQuantidade = somar ( mQuantidade , 1 );
					}
					
				}
				
			}others {
				exception "O vetor precisa ser um tamanho maior ou igual a 0 !";
			}
			
		}
		restrict : 
		define mPrimeiro : Item >> ( T ) = null;
		define mUltimo : Item >> ( T ) = null;
		define mQuantidade : int = 0;
		all : 
		func getQuantidade ( ) : int {
			return mQuantidade;
		}

	block -> get[ v : int ] : T {
        return get(v);
    }

    block -> set[ v : int ] -> ( v1 : T )  {
        set(v,v1);
    }

		act listar ( ) {
			if ( isNull ( mPrimeiro ) == false ) -> {
				def mCorrente : Item >> ( T ) = mPrimeiro;
				def mID : int = 0;
				while ( isNull ( mCorrente ) == false ) -> {
					println ( " - Valor : ", mID , " -->> ", mCorrente.getValor ( ) );
					mCorrente = mCorrente.getProximo ( );
					mID = somar ( mID , 1 );
				}
				
			}
			
		}

		act mudarTodos ( eValor : T ) {
			if ( isNull ( mPrimeiro ) == false ) -> {
				def mCorrente : Item >> ( T ) = mPrimeiro;
				def mID : int = 0;
				while ( isNull ( mCorrente ) == false ) -> {
					mCorrente.setValor ( eValor );
					mCorrente = mCorrente.getProximo ( );
					mID = somar ( mID , 1 );
				}
				
			}
			
		}
		func get ( indice : int ) : T {
			def ret : T = null;
			if ( maior_igual ( indice , 0 ) ) -> {
				def contando : int = 0;
				def enc : bool = false;
				if ( isNull ( mPrimeiro ) == false ) -> {
					def mCorrente : Item >> ( T ) = mPrimeiro;
					while ( isNull ( mCorrente ) == false ) -> {
						if ( contando == indice ) -> {
							ret = mCorrente.getValor ( );
							enc = true;
						}
						contando = somar ( contando , 1 );
						mCorrente = mCorrente.getProximo ( );
					}
					
				}
				if ( enc == false ) -> {
					exception "Indice invalido !";
				}
				
			}others {
				exception "Indice invalido !";
			}
			return ret;
		}
		func getValor ( indice : int ) : T {
			def ret : T = null;
			if ( maior_igual ( indice , 0 ) ) -> {
				def contando : int = 0;
				def enc : bool = false;
				if ( isNull ( mPrimeiro ) == false ) -> {
					def mCorrente : Item >> ( T ) = mPrimeiro;
					while ( isNull ( mCorrente ) == false ) -> {
						if ( contando == indice ) -> {
							ret = mCorrente.getValor ( );
							enc = true;
						}
						contando = somar ( contando , 1 );
						mCorrente = mCorrente.getProximo ( );
					}
					
				}
				if ( enc == false ) -> {
					exception "Indice invalido !";
				}
				
			}others {
				exception "Indice invalido !";
			}
			return ret;
		}

		act set ( indice : int , valor : T ) {
			if ( maior_igual ( indice , 0 ) ) -> {
				def contando : int = 0;
				def enc : bool = false;
				if ( isNull ( mPrimeiro ) == false ) -> {
					def mCorrente : Item >> ( T ) = mPrimeiro;
					while ( isNull ( mCorrente ) == false ) -> {
						if ( contando == indice ) -> {
							mCorrente.setValor ( valor );
							enc = true;
						}
						contando = somar ( contando , 1 );
						mCorrente = mCorrente.getProximo ( );
					}
					
				}
				if ( enc == false ) -> {
					exception "Indice invalido !";
				}
				
			}others {
				exception "Indice invalido !";
			}
			
		}

		act mostrarStruct ( ) {
			DEBUG -> REGRESSIVE :: ALL;
		}

		act destruir ( ) {
			
			#println ( "QT : ", mQuantidade );
			if ( isNull ( mPrimeiro ) == false ) -> {
				def mCorrente : Item >> ( T ) = mPrimeiro;
				def mAnterior : Item >> ( T ) = mPrimeiro;
				while ( isNull ( mCorrente ) == false ) -> {
					mAnterior = mCorrente;
					mCorrente = mCorrente.getProximo ( );
					
					#trash ( mAnterior );
					if ( isNull ( mAnterior ) == false ) -> {
						delete mAnterior;
					}
					mQuantidade = subtrair ( mQuantidade , 1 );
				}
				
				#trash ( mAnterior );
				if ( isNull ( mCorrente ) == false ) -> {
					delete mCorrente;
				}
				
			}
			mPrimeiro = null;
			mUltimo = null;
		}
		restrict : 
		
	}


	
}
