package Iterador {

	model Iteracao in ( G1 , G2 ) {
		act iniciar ( );
		act proximo ( );
		func continuar ( ) : bool;
		func getIndex ( ) : int;
		func getValor ( ) : G2;
	}

	struct Iterador in ( T1 , T2 ) at Iteracao >> ( T1 , T2 ) {
		init Iterador ( eLista : T1 ) {
			mLista = eLista;
			mIndex = 0;
			mTamanho = 0;
			mIniciado = false;
			mTerminou = false;
		}
		restrict : 
		define mLista : T1 = null;
		define mIndex : int = 0;
		define mTamanho : int = 0;
		define mIniciado : bool = false;
		define mTerminou : bool = false;
		all : 
		act iniciar ( ) {
			mIndex = 0;
			mTamanho = mLista.getQuantidade ( );
			mIniciado = true;
			mTerminou = false;
		}

		act proximo ( ) {
			if ( mIniciado ) -> {
				if ( mTerminou == false ) -> {
					if ( menor ( mIndex , mTamanho ) ) -> {
						mIndex = somar ( mIndex , 1 );
					}others {
						mTerminou = true;
					}
					
				}
				
			}
			
		}
		func continuar ( ) : bool {
			def ret : bool = false;
			if ( mIniciado ) -> {
				if ( maior_igual ( mIndex , mTamanho ) ) -> {
					mTerminou = true;
				}others {
					ret = true;
				}
				
			}others {
				ret = false;
			}
			return ret;
		}
		func getIndex ( ) : int {
			if ( mIniciado ) -> {
				
			}others {
				exception "O iterador nao foi iniciado !";
			}
			return mIndex;
		}
		func getValor ( ) : T2 {
			def ii : int = getIndex ( );
			return mLista.getValor ( ii );
		}
		
	}
	
}
