package Ecologia {

	struct Especie {

        init Especie () {
            mRegistro = Especie ->  Registrar();
        }

        implicit:
	        define mRegistroGeral : int = -1;

	    explicit :
	        func Registrar () : int {
	            mRegistroGeral = mRegistroGeral ++ 1;
	            return mRegistroGeral;
	        }

	    restrict:
	        define mRegistro : int;
		    define mEspecie : string;

	    all:

            func getEspecie() : string { return mEspecie;}

		extra:
		    operator == (E1 : Especie , E2 : Especie) : bool {
		        return E1.getEspecie() == E2.getEspecie();
		    }
	}

	struct Organismo with Especie {

			init Organismo ( ) -> Especie ( ) {

    		}

	    all:
		define nome : string;
		define idade : int;


		act viver ( ) {
			
		}

		act morrer ( ) {
			
		}
		func getNome ( ) : string {
			return nome;
		}
		func getIdade ( ) : int {
			return idade;
		}

		act setNome ( eNome : string ) {
			nome = eNome;
		}

		act setIdade ( eIdade : int ) {
			idade = eIdade;
		}
		
	}

	struct Gato with Organismo {

			init Gato ( eNome : string , eIdade : int ) -> Organismo ( ) {
    			mEspecie = "GATO";
    			nome = eNome;
    			idade = eIdade;
    		}
    		all:
		define velocidade : num;
		define velocidadeMax : num;
		mockiz idadeMax : int;

		func getVelocidade ( ) : num {
			return velocidade;
		}
		func getVelocidadeMax ( ) : num {
			return velocidadeMax;
		}
		func getIdadeMax ( ) : int {
			return idadeMax;
		}

		act setVelocidade ( eVelocidade : num ) {
			velocidade = eVelocidade;
		}

		act setVelocidadeMax ( eVelocidadeMax : num ) {
			velocidadeMax = eVelocidadeMax;
		}

		act setIdadeMax ( eIdadeMax : int ) {
			idadeMax = eIdadeMax;
		}
		
	}

	struct SuperGato with Gato {

			init SuperGato ( eNome : string , eIdade : int ) -> Gato ( eNome , eIdade ) {
    			mEspecie = "SUPERGATO";
    		}
    		all:
		define velocidadeSuper : num;


		act setVelocidadeSuper ( eVelocidadeSuper : num ) {
			velocidadeSuper = eVelocidadeSuper;
		}
		func getVelocidadeSuper ( ) : num {
			return velocidadeSuper;
		}
		
	}

	external Ecossistema {

	    implicit:
	        define mEnergia : int = 0;
            mockiz mQuantum : int = 20;

            func getE1() : int {return 10;}
            func getE2() : int {return 20;}
            func getE3() : int {return 30;}

            act aumentarQuantum(){
                mQuantum =mQuantum ++ 10;
            }
            act diminuirQuantum(){
                mQuantum =mQuantum -- 10;
            }

	    explicit:

	        define Transferencia : int = 0;
	        mockiz TransferenciaQuantum : int = 10;

            act aumentarEnergia(){
                mEnergia = mEnergia ++ mQuantum;
            }

            act reduzirEnergia(){
                mEnergia = mEnergia -- mQuantum;
            }

	        func getEnergia () : int { return mEnergia; }
	        func getQuantum () : int { return mQuantum; }

	}
	
}
