
struct Lista in ( T ) {

	restrict :
	define mPrimeiro : Item >> ( T ) = null;
	define mUltimo : Item >> ( T ) = null;
	define mQuantidade : num = 0;

	all :
	func getQuantidade ( ) : num {
		return mQuantidade;
	}

	act adicionar ( novo : T ) {
		if ( isNull ( mPrimeiro ) ) -> {
			mPrimeiro = init >> ( T ) Item ( );
			mPrimeiro.setValor ( novo );
			mUltimo = mPrimeiro;
			mQuantidade = 1;
		}others {

		    def mCorrente : Item >> ( T ) =  init >> ( T ) Item ( );
		    mCorrente.setValor ( novo );
            mUltimo.setProximo(mCorrente);
            mUltimo = mCorrente;

			mQuantidade = somar_inteiro ( mQuantidade , 1 );
		}

	}

	act listar() {

	    if ( isNull ( mPrimeiro ) == false ) -> {

             def mCorrente : Item >> ( T ) = mPrimeiro;

             while (isNull(mCorrente) == false) -> {
                 println("Valor : ",mCorrente.getValor());
                 mCorrente = mCorrente.getProximo();
             }
	    }


	}

}

struct Item in ( T ) {
	restrict :
	define mValor : T = null;
	define mProximo : Item >> ( T ) = null;
	all :

	func getValor ( ) : T {
		return mValor;
	}

	act setValor ( eValor : T ) {
		mValor = eValor;
	}

		func getProximo ( ) :  Item >> ( T ) {
    		return mProximo;
    	}
    	act setProximo ( eProximo : Item >> ( T ) ) {
        	mProximo = eProximo;
        }
        func getProximo() : Item >> ( T) { return mProximo; }
}

