package Tempo {
	struct Tempo {
		restrict : 
		define mHora : int = 0;
		define mMinuto : int = 0;
		define mSegundo : int = 0;
		all : 
		init Tempo ( h : int , m : int , s : int ) {
			mHora = h;
			mMinuto = m;
			mSegundo = s;
		}
		init Tempo ( ) {



					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_SECOND;

                         }

                    	 mSegundo   =  reg @R5;


        		 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_MINUTE;

                     }

                	 mMinuto   =  reg @R5;


        	 PROC -> {

                    SET R5;
                        MOV 0;
                        PROC CHRONOS_HOUR;

                 }

            	 mHora   =  reg @R5;

		}
		func getHora ( ) : int {
			return mHora;
		}
		func getMinuto ( ) : int {
			return mMinuto;
		}
		func getSegundo ( ) : int {
			return mSegundo;
		}
		func getFormatado ( ) : string {
			def f1 : string = num_to_string ( mHora );
			def f2 : string = num_to_string ( mMinuto );
			def f3 : string = num_to_string ( mSegundo );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			if ( menor ( string_length ( f3 ) , 2 ) ) -> {
				f3 = string_append ( "0", f3 );
			}
			def formatado : string = string_append ( f1 , ":", f2 , ":", f3 );
			return formatado;
		}
		explicit :
		func getTempo ( ) : Tempo {
			def a : Tempo = init Tempo ( );
			return a;
		}
		func getData ( ) : Data {
			def a : Data = init Data ( );
			return a;
		}
		
		# Comentario dfgfdg func
		func getTempo_Formatado ( ) : string {
			def mHora : int = 0;
			def mMinuto : int = 0;
			def mSegundo : int = 0;


					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_SECOND;

                         }

                    	 mSegundo   =  reg @R5;


        		 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_MINUTE;

                     }

                	 mMinuto   =  reg @R5;


        	 PROC -> {

                    SET R5;
                        MOV 0;
                        PROC CHRONOS_HOUR;

                 }

            	 mHora   =  reg @R5;



			def f1 : string = num_to_string ( mHora );
			def f2 : string = num_to_string ( mMinuto );
			def f3 : string = num_to_string ( mSegundo );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			if ( menor ( string_length ( f3 ) , 2 ) ) -> {
				f3 = string_append ( "0", f3 );
			}
			def formatado : string = string_append ( f1 , ":", f2 , ":", f3 );
			return formatado;
		}


		
	}

	struct Data {
		restrict : 
		define mDia : int = 0;
		define mMes : int = 0;
		define mAno : int = 0;
		all : 
		init Data ( d : int , m : int , a : int ) {
			mDia = d;
			mMes = m;
			mAno = a;
		}
		init Data ( ) {

				 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_DAY;

                     }

                	 mDia   =  reg @R5;

					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_MONTH;

                         }

                    	 mMes   =  reg @R5;

					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_YEAR;

                         }

                    	 mAno   =  reg @R5;

		}
		func getDia ( ) : int {
			return mDia;
		}
		func getMes ( ) : int {
			return mMes;
		}
		func getAno ( ) : int {
			return mAno;
		}
		func getFormatado ( ) : string {
			def f1 : string = num_to_string ( mDia );
			def f2 : string = num_to_string ( mMes );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			def formatado : string = string_append ( f1 , "/", f2 , "/", f3 );
			return formatado;
		}

		explicit:
				func getData_Formatado ( ) : string {
        			def mDia : int = 0;
        			def mMes : int = 0;
        			def mAno : int = 0;

        	 PROC -> {

                                    SET R5;
                                        MOV 0;
                                        PROC CHRONOS_DAY;

                                 }

                            	 mDia   =  reg @R5;

            					 PROC -> {

                                        SET R5;
                                            MOV 0;
                                            PROC CHRONOS_MONTH;

                                     }

                                	 mMes   =  reg @R5;

            					 PROC -> {

                                        SET R5;
                                            MOV 0;
                                            PROC CHRONOS_YEAR;

                                     }

                                	 mAno   =  reg @R5;

        			def f1 : string = num_to_string ( mDia );
        			def f2 : string = num_to_string ( mMes );
        			def f3 : string = num_to_string ( mAno );
        			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
        				f1 = string_append ( "0", f1 );
        			}
        			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
        				f2 = string_append ( "0", f2 );
        			}
        			def formatado : string = string_append ( f1 , "/", f2 , "/", f3 );
        			return formatado;
        		}
		
	}

	struct TempoData {
		restrict : 
		define mHora : int = 0;
		define mMinuto : int = 0;
		define mSegundo : int = 0;
		define mDia : int = 0;
		define mMes : int = 0;
		define mAno : int = 0;
		all : 
		init TempoData ( h : int , mi : int , s : int , d : int , me : int , a : int ) {
			mHora = h;
			mMinuto = mi;
			mSegundo = s;
			mDia = d;
			mMes = me;
			mAno = a;
		}
		init TempoData ( ) {

			 PROC -> {

                    SET R5;
                        MOV 0;
                        PROC CHRONOS_SECOND;

                 }

            	 mSegundo   =  reg @R5;


		 PROC -> {

                SET R5;
                    MOV 0;
                    PROC CHRONOS_MINUTE;

             }

        	 mMinuto   =  reg @R5;


	 PROC -> {

            SET R5;
                MOV 0;
                PROC CHRONOS_HOUR;

         }

    	 mHora   =  reg @R5;


				 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_DAY;

                     }

                	 mDia   =  reg @R5;

					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_MONTH;

                         }

                    	 mMes   =  reg @R5;

					 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_YEAR;

                         }

                    	 mAno   =  reg @R5;

		}
		func getHora ( ) : int {
			return mHora;
		}
		func getMinuto ( ) : int {
			return mMinuto;
		}
		func getSegundo ( ) : int {
			return mSegundo;
		}
		func getDia ( ) : int {
			return mDia;
		}
		func getMes ( ) : int {
			return mMes;
		}
		func getAno ( ) : int {
			return mAno;
		}
		func getFormatado ( ) : string {
			def f1 : string = num_to_string ( mDia );
			def f2 : string = num_to_string ( mMes );
			def f3 : string = num_to_string ( mAno );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			def alfa : string = string_append ( f1 , "/", f2 , "/", f3 );
			def p1 : string = num_to_string ( mHora );
			def p2 : string = num_to_string ( mMinuto );
			def p3 : string = num_to_string ( mSegundo );
			if ( menor ( string_length ( p1 ) , 2 ) ) -> {
				p1 = string_append ( "0", p1 );
			}
			if ( menor ( string_length ( p2 ) , 2 ) ) -> {
				p2 = string_append ( "0", p2 );
			}
			if ( menor ( string_length ( p3 ) , 2 ) ) -> {
				p3 = string_append ( "0", p3 );
			}
			def beta : string = string_append ( p1 , ":", p2 , ":", p3 );
			def formatado : string = string_append ( alfa , " ", beta );
			return formatado;
		}
		explicit : func getDataTempo_Formatado ( ) : string {
			def mHora : int = 0;
			def mMinuto : int = 0;
			def mSegundo : int = 0;
			def mDia : int = 0;
			def mMes : int = 0;
			def mAno : int = 0;

				 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_SECOND;

                     }

                	 mSegundo   =  reg @R5;


    		 PROC -> {

                    SET R5;
                        MOV 0;
                        PROC CHRONOS_MINUTE;

                 }

            	 mMinuto   =  reg @R5;


    	 PROC -> {

                SET R5;
                    MOV 0;
                    PROC CHRONOS_HOUR;

             }

        	 mHora   =  reg @R5;


    				 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_DAY;

                         }

                    	 mDia   =  reg @R5;

    					 PROC -> {

                                SET R5;
                                    MOV 0;
                                    PROC CHRONOS_MONTH;

                             }

                        	 mMes   =  reg @R5;

    					 PROC -> {

                                SET R5;
                                    MOV 0;
                                    PROC CHRONOS_YEAR;

                             }

                        	 mAno   =  reg @R5;

			def f1 : string = num_to_string ( mDia );
			def f2 : string = num_to_string ( mMes );
			def f3 : string = num_to_string ( mAno );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			def alfa : string = string_append ( f1 , "/", f2 , "/", f3 );
			def p1 : string = num_to_string ( mHora );
			def p2 : string = num_to_string ( mMinuto );
			def p3 : string = num_to_string ( mSegundo );
			if ( menor ( string_length ( p1 ) , 2 ) ) -> {
				p1 = string_append ( "0", p1 );
			}
			if ( menor ( string_length ( p2 ) , 2 ) ) -> {
				p2 = string_append ( "0", p2 );
			}
			if ( menor ( string_length ( p3 ) , 2 ) ) -> {
				p3 = string_append ( "0", p3 );
			}
			def beta : string = string_append ( p1 , ":", p2 , ":", p3 );
			def formatado : string = string_append ( alfa , " ", beta );
			return formatado;
		}
		func getTempoData_Formatado ( ) : string {
			def mHora : int = 0;
			def mMinuto : int = 0;
			def mSegundo : int = 0;
			def mDia : int = 0;
			def mMes : int = 0;
			def mAno : int = 0;

				 PROC -> {

                        SET R5;
                            MOV 0;
                            PROC CHRONOS_SECOND;

                     }

                	 mSegundo   =  reg @R5;


    		 PROC -> {

                    SET R5;
                        MOV 0;
                        PROC CHRONOS_MINUTE;

                 }

            	 mMinuto   =  reg @R5;


    	 PROC -> {

                SET R5;
                    MOV 0;
                    PROC CHRONOS_HOUR;

             }

        	 mHora   =  reg @R5;


    				 PROC -> {

                            SET R5;
                                MOV 0;
                                PROC CHRONOS_DAY;

                         }

                    	 mDia   =  reg @R5;

    					 PROC -> {

                                SET R5;
                                    MOV 0;
                                    PROC CHRONOS_MONTH;

                             }

                        	 mMes   =  reg @R5;

    					 PROC -> {

                                SET R5;
                                    MOV 0;
                                    PROC CHRONOS_YEAR;

                             }

                        	 mAno   =  reg @R5;

			def f1 : string = num_to_string ( mDia );
			def f2 : string = num_to_string ( mMes );
			def f3 : string = num_to_string ( mAno );
			if ( menor ( string_length ( f1 ) , 2 ) ) -> {
				f1 = string_append ( "0", f1 );
			}
			if ( menor ( string_length ( f2 ) , 2 ) ) -> {
				f2 = string_append ( "0", f2 );
			}
			def alfa : string = string_append ( f1 , "/", f2 , "/", f3 );
			def p1 : string = num_to_string ( mHora );
			def p2 : string = num_to_string ( mMinuto );
			def p3 : string = num_to_string ( mSegundo );
			if ( menor ( string_length ( p1 ) , 2 ) ) -> {
				p1 = string_append ( "0", p1 );
			}
			if ( menor ( string_length ( p2 ) , 2 ) ) -> {
				p2 = string_append ( "0", p2 );
			}
			if ( menor ( string_length ( p3 ) , 2 ) ) -> {
				p3 = string_append ( "0", p3 );
			}
			def beta : string = string_append ( p1 , ":", p2 , ":", p3 );
			def formatado : string = string_append ( beta , " ", alfa );
			return formatado;
		}
		
	}
	
}
