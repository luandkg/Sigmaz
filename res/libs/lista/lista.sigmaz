package Lista {
	struct Lista in ( T ) {
		restrict : 
		define mPrimeiro : Item >> ( T ) = null;
		define mUltimo : Item >> ( T ) = null;
		define mQuantidade : num = 0;
		all : 
		func getQuantidade ( ) : num {
			return mQuantidade;
		}

		act adicionar ( novo : T ) {
			if ( isNull ( mPrimeiro ) ) -> {
				mPrimeiro = init >> ( T ) Item ( );
				mPrimeiro.setValor ( novo );
				mUltimo = mPrimeiro;
				mQuantidade = 1;
			}others {
				def mCorrente : Item >> ( T ) = init >> ( T ) Item ( );
				mCorrente.setValor ( novo );
				mUltimo.setProximo ( mCorrente );
				mUltimo = mCorrente;
				mQuantidade = somar_inteiro ( mQuantidade , 1 );
			}
			
		}

		act remover ( a : T ) {
			println ( "Remover : ", a );
			if ( isNull ( mPrimeiro ) ) -> {
				
			}others {
				def mAnterior : Item >> ( T ) = null;
				def mCorrente : Item >> ( T ) = mPrimeiro;
				def mIndice : num = 0;
				def mUltimoIndice : num = subtrair_inteiro ( mQuantidade , 1 );
				while ( isNull ( mCorrente ) == false ) -> {
					if ( mCorrente.getValor ( ) == a ) -> {
						println ( "Removendo : ", a );
						if ( mIndice == 0 ) -> {
							if ( mQuantidade == 1 ) -> {
								mPrimeiro = null;
								mUltimo = null;
							}others {
								mPrimeiro = mPrimeiro.getProximo ( );
							}
							
						}other ( mIndice == mUltimoIndice ) -> {
							mAnterior.setProximo ( null );
							mUltimo = mAnterior;
						}others {
							mAnterior.setProximo ( mCorrente.getProximo ( ) );
						}
						mQuantidade = subtrair_inteiro ( mQuantidade , 1 );
						trash ( mCorrente );
						cancel;
					}
					
					#println("Passando Por : ",mCorrente.getValor());
					mAnterior = mCorrente;
					mCorrente = mCorrente.getProximo ( );
					mIndice = somar_inteiro ( mIndice , 1 );
				}
				
			}
			
		}

		act listar ( ) {
			if ( isNull ( mPrimeiro ) == false ) -> {
				def mCorrente : Item >> ( T ) = mPrimeiro;
				while ( isNull ( mCorrente ) == false ) -> {
					println ( " - Valor : ", mCorrente.getValor ( ) );
					mCorrente = mCorrente.getProximo ( );
				}
				
			}
			
		}

		act limpar ( ) {
			if ( isNull ( mPrimeiro ) == false ) -> {
				def mCorrente : Item >> ( T ) = mPrimeiro;
				def mAnterior : Item >> ( T ) = mPrimeiro;
				while ( isNull ( mCorrente ) == false ) -> {
					mAnterior = mCorrente;
					mCorrente = mCorrente.getProximo ( );
					trash ( mAnterior );
				}
				trash ( mAnterior );
			}
			mPrimeiro = null;
			mUltimo = null;
		}
		func getValor ( indice : num ) : T {
			def ret : num = null;
			if ( maior_igual ( indice , 0 ) ) -> {
				def contando : num = 0;
				def enc : bool = false;
				if ( isNull ( mPrimeiro ) == false ) -> {
					def mCorrente : Item >> ( T ) = mPrimeiro;
					while ( isNull ( mCorrente ) == false ) -> {
						if ( contando == indice ) -> {
							ret = mCorrente.getValor ( );
							enc = true;
						}
						contando = somar_inteiro ( contando , 1 );
						mCorrente = mCorrente.getProximo ( );
					}
					
				}
				if ( enc == false ) -> {
					exception "Indice invalido !";
				}
				
			}others {
				exception "Indice invalido !";
			}
			return ret;
		}

		act mostrarStruct(){
			invoke __COMPILER__ -> SHOW_STRUCT ( ) :: ALL;
		}
	}

	struct Item in ( T ) {
		restrict : 
		define mValor : T = null;
		define mProximo : Item >> ( T ) = null;
		all : 
		func getValor ( ) : T {
			return mValor;
		}

		act setValor ( eValor : T ) {
			mValor = eValor;
		}
		func getProximo ( ) : Item >> ( T ) {
			return mProximo;
		}

		act setProximo ( eProximo : Item >> ( T ) ) {
			mProximo = eProximo;
		}
		func getProximo ( ) : Item >> ( T ) {
			return mProximo;
		}
		
	}


}
