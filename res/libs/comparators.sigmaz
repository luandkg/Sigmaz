
#   COMPARATORS
func operador_e ( a : bool , b : bool ) : bool {

    PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> a;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

  PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> b;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

	def c : bool = false;
	if ( a == true ) -> {
		if ( b == true ) -> {
			c = true;
		}
		
	}
	return c;
}
func operador_ou ( a : bool , b : bool ) : bool {

    PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> a;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

  PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> b;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

	def c : bool = false;
	if ( a == true ) -> {
		c = true;
	}
	if ( b == true ) -> {
		c = true;
	}
	return c;
}
func igual ( a : bool , b : bool ) : bool {

    PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> a;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

  PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> b;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

	reg @ R1 -> a;
	reg @ R2 -> b;
	PROC -> {
		SET R3;
		MOV FALSE;
		OPE R1 MATCH R2;
	}
	return reg @ R3;
}
func diferente ( a : bool , b : bool ) : bool {

    PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> a;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

  PROC -> {
        SET R0;
        MOV FALSE;
    }

    reg @R0 -> b;

    if (reg @R0) -> {
        exception OPERADOR_NULO;
    }

	reg @ R1 -> a;
	reg @ R2 -> b;
	PROC -> {
		SET R3;
		MOV FALSE;
		OPE R1 UNMATCH R2;
	}
	return reg @ R3;
}
