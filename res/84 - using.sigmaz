
call iniciar -> mudar ( );


act mudar ( ) {

   def caixa_Z : Caixa = init Caixa(13);
   caixa_Z.INDICE = 5;

    def antes_z_valor : int = caixa_Z.getValor();
    def antes_z_indice : int = caixa_Z.INDICE;

       using caixa_Z -> {

           setValor(30);
           #caixa_Z.setValor(30);

           INDICE = 1 ++ INDICE;
           # caixa_Z.INDICE = 8;

       }



       def depois_z_valor : int = caixa_Z.getValor();
       def depois_z_indice : int = caixa_Z.INDICE;

    	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;


    }


struct Caixa {

    init Caixa(IniciarCom : int){
        mValor = IniciarCom;
    }

    restrict :
        define mValor : int = 0;

    all:

        define INDICE : int = 0;

        func getValor() : int {return mValor;}

        act setValor(a:int) {mValor = a;}

        operator ++ ( a : Caixa , b : Caixa ) : Caixa {
        	return init Caixa(a.getValor() ++ b.getValor());
        }

    extern:
        func CAIXADOR() : int {return 12;}
        func ENCAIXADOR(a:int) : int {return a++12;}
}

    operator ++ ( a : int , b : int ) : int {
    	def c : int;
    	invoke math -> operator_sum_int ( a , b ) :: c;
    	return c;
    }
