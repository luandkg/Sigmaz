call iniciar ->  {
	algo ( )  ;
	algo ( -119.0 )  ;
	def s : num = som ( 4.0 )  ;
	duplo ( 3.0 )  ;
	quazar ( )  ;
	quazar ( 9.0 )  ;
	def w : num = 12.0  ;
	fofocar ( w )  ;
	fofocar ( )  ;
	def ga : num = gral ( 5.0 )  ;
	opcional ( 3 )  ;
	opcional ( )  ;
	DEBUG -> REGRESSIVE :: STACK  ;
	DEBUG -> REGRESSIVE :: STACK  ;
	DEBUG -> REGRESSIVE :: FUNCTIONS  ;
}

act fofocar ( opt ref r : num = 50.0 , opt a : int = 5 )  {
	DEBUG -> REGRESSIVE :: STACK  ;
}

act opcional ( opt moc opcional_const : int = 5 )  {
	DEBUG -> LOCAL :: STACK  ;
}

func bla ( ) : num  {
	return som ( 2.0 , false )  ;
}

func som ( g : num , opt v : bool = false ) : num  {
	return g  ;
}

act algo ( opt a : num = 5.0 )  {
	DEBUG -> REGRESSIVE :: ACTIONS  ;
}

act duplo ( opt a : num = 5.0 , opt b : int = 2 )  {
	DEBUG -> REGRESSIVE :: ACTIONS  ;
}

act quazar ( opt a : num = 5.0 , opt b : int = 12 )  {
	DEBUG -> REGRESSIVE :: ACTIONS  ;
}

act normal ( a : num , b : num )  {
	DEBUG -> REGRESSIVE :: ACTIONS  ;
}

func gral ( g : num , opt ref v : bool = false ) : num  {
	DEBUG -> REGRESSIVE :: STACK  ;
	return g  ;
}

act correr ( a : int , opt b : int = 4 , opt c : num = 6.0 )  {
}
package COX  {
	struct Coxa  {
		all :
			
			act encoxar ( a : num , opt b : bool = false , opt c : num = 12.0 )  {
				DEBUG -> REGRESSIVE :: STACK  ;
				DEBUG -> REGRESSIVE :: ACTIONS  ;
			}
	}
}