call iniciar -> operando ( );
act operando ( ) {
	moc PARAR : int = 10;
	moc PASSO : int = 1;
	moc MSG_PAR : string = " : PAR ";
	moc MSG_IMPAR : string = " : IMPAR ";
	step def numero : int :: ( 0 , PARAR , somar ( numero , PASSO ) ) -> {
		def resto : int = resto ( numero , 2 );
		if ( resto == 0 ) -> {
			println ( numero , MSG_PAR );
		}
		if ( resto == 1 ) -> {
			println ( numero , MSG_IMPAR );
		}
		
	}
	
}
func somar ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_sum_int ( a , b ) :: c;
	return c;
}
func resto ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_mod_int ( a , b ) :: c;
	return c;
}

act println ( a : int , b : string ) {
	def c : int;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}

act println ( a : string , b : int ) {
	def c : int;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}
func menor ( a : int , b : int ) : bool {
	def c : bool;
	invoke math -> operator_less_int ( a , b ) :: c;
	return c;
}
operator == ( a : int , b : int ) : bool {
	def c : bool;
	def c1 : int = a;
	def c2 : int = b;
	invoke math -> operator_equal_int ( c1 , c2 ) :: c;
	return c;
}
