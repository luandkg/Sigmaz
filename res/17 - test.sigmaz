func somar ( b1 : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum ( b1 , b ) :: c;
	return c;
}
func menor ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_less ( a , b ) :: c;
	return c;
}
func inteiro ( a : num ) : num {
	def c : num;
	invoke casting -> cast_integer ( a ) :: c;
	return c;
}
func decimal ( a : num ) : num {
	def c : num;
	invoke casting -> cast_decimal ( a ) :: c;
	return c;
}

act println ( a : string , b : num ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}
operator == ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_equal ( a , b ) :: c;
	return c;
}

act operando ( geral : num ) {
	def w : num = 0;
	invoke terminal -> change ( ) :: w;
	def a1 : num = 0;
	def raiz : num = 0;
	while ( menor ( a1 , 10 ) ) -> {
		println ( "Valor : ", inteiro ( a1 ) );
		def cc : num = somar ( a1 , a1 );
		cc = somar ( geral , cc );
		cc = somar ( inteiro ( cc ) , raiz );
		raiz = somar ( raiz , 0.12 );
		def auxiliar : num;
		if ( inteiro ( cc ) == 15 ) -> {
			auxiliar = 5;
		}
		if ( inteiro ( cc ) == 17 ) -> {
			
		}other ( inteiro ( cc ) == 11 ) -> {
			auxiliar = -1;
		}others {
			if ( inteiro ( cc ) == 21 ) -> {
				auxiliar = 7;
			}
			
		}
		if ( inteiro ( cc ) == 19 ) -> {
			def passador : num = 1;
			def acumulando : num = 0;
			step passador :: ( 0 , 10 , inteiro ( somar ( passador , 1 ) ) ) -> {
				acumulando = somar ( acumulando , 2 );
			}
			auxiliar = acumulando;
		}others {
			
		}
		if ( inteiro ( cc ) == 21 ) -> {
			def passador : num = 1;
			def acumulando : num = 0;
			step passador :: ( 0 , 10 , inteiro ( somar ( passador , 1 ) ) ) -> {
				if ( passador == 8 ) -> {
					cancel;
				}
				if ( passador == 5 ) -> {
					continue;
				}
				acumulando = somar ( acumulando , 2 );
			}
			auxiliar = acumulando;
		}
		if ( inteiro ( cc ) == 24 ) -> {
			def acumulando : num = 0;
			step def passador : num :: ( 0 , 10 , inteiro ( somar ( passador , 1 ) ) ) -> {
				if ( passador == 8 ) -> {
					cancel;
				}
				if ( passador == 5 ) -> {
					continue;
				}
				acumulando = somar ( acumulando , somar ( 2 , passador ) );
			}
			auxiliar = acumulando;
		}
		when ( inteiro ( cc ) ) -> {
			case 13 -> {
				auxiliar = 1313;
			}
			case 7 -> {
				auxiliar = 7070;
			}others {
				if ( inteiro ( cc ) == 9 ) -> {
					auxiliar = 9090;
				}
				
			}
			
		}
		daz ( inteiro ( cc ) ) -> {
			extrem ( 0 , 5 ) -> {
				auxiliar = 55555;
			}
			
		}
		println ( "  - Numero : ", cc );
		println ( "  - Inteiro : ", inteiro ( cc ) );
		println ( "  - Decimal : ", decimal ( cc ) );
		println ( "  - Auxilar : ", auxiliar );
		a1 = somar ( a1 , 1 );
	}
	invoke terminal -> change ( ) :: w;
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: ALL;
}

act operar ( geral : num ) {
	operando ( somar ( 3 , geral ) );
}
mockiz OPERANTE : num = 2;
define SGeral : num = somar ( 2 , 2 );

call iniciar -> operar ( OPERANTE );
