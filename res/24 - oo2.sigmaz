struct Sacola {
	define itens : int = 0;
	act aumentar ( g : int ) {
		itens = somar_inteiro ( itens , g );
	}
	func quantidade ( ) : int {
		return itens;
	}

	act mostrar ( ) {
		invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: ALL;
	}

	act mostrar_detalhes ( ) {
		println ( "");
		println ( " SACOLA : ");
		println ( "    - Itens : ", itens );
	}

	act mostrar_struct ( ) {
		invoke __COMPILER__ -> SHOW_STRUCT ( ) :: ALL;
	}
	func someisso ( a : int , b : int ) : int {
		return somar_inteiro ( a , b );
	}
	
}
func somar_inteiro ( a : int , b : int ) : int {
	def c : int;
	invoke math -> operator_sum_int ( a , b ) :: c;
	invoke casting -> cast_integer_int ( c ) :: c;
	return c;
}

act println ( a : string , b : int ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}

act println ( a : string ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
}

call iniciar -> pular ( );

act pular ( ) {
	def sacola1 : Sacola = init Sacola ( );
	sacola1.mostrar_struct ( );
	sacola1.aumentar ( 2 );
	sacola_aumentar ( sacola1 );
	sacola1.mostrar_detalhes ( );
}

act sacola_aumentar ( s : Sacola ) {
	s.aumentar ( 2 );
}
