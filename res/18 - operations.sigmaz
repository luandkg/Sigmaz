call iniciar -> pular ( );
act pular ( ) {
	def f : num = 13.0;
	def a : bool = 13.0 == f;
	def v : bool = ( true !! false );
	def t : bool = "a"!! "ab";
	def somatorio : num = 10.0 -- 12.0;
	def m1 : num = 10.0 ** 2.0;
	invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: ALL;
}
func somar ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum_num ( a , b ) :: c;
	return c;
}
operator ++ ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sum_num ( a , b ) :: c;
	return c;
}
operator -- ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_sub_num ( a , b ) :: c;
	return c;
}
operator == ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_equal_num ( a , b ) :: c;
	return c;
}
operator !! ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_not_num ( a , b ) :: c;
	return c;
}
operator == ( a : bool , b : bool ) : bool {
	def c : bool;
	invoke math -> operator_match ( a , b ) :: c;
	return c;
}
operator !! ( a : bool , b : bool ) : bool {
	def c : bool;
	invoke math -> operator_unmatch ( a , b ) :: c;
	return c;
}
operator == ( a : string , b : string ) : bool {
	def c : bool;
	invoke terminal -> operator_match ( a , b ) :: c;
	return c;
}
operator !! ( a : string , b : string ) : bool {
	def c : bool;
	invoke terminal -> operator_unmatch ( a , b ) :: c;
	return c;
}
operator ** ( a : num , b : num ) : num {
	def c : num;
	invoke math -> operator_mux_num ( a , b ) :: c;
	return c;
}
