 import"libs/lib.sigmaz" ;
call iniciar -> inicio ( ) ;
refer Lista ;

refer Iterador ;

act inicio ( ) { 
def ig : Lista >> ( int ) = init Lista ( ) >> ( int ) ;
	ig . adicionar ( 10 ) ;
	ig . adicionar ( 20 ) ;
	def a : int = ig . getQuantidade ( ) ;
	DEBUG -> REGRESSIVE :: STACK ;
	ig . adicionar ( 30 ) ;
	ig . adicionar ( 40 ) ;
	ig . adicionar ( 50 ) ;
	ig . adicionar ( 60 ) ;
	println ( "TESTE : " , 1 ) ;
	def b : int = ig . getQuantidade ( ) ;
	println ( "TESTE : " , 2 ) ;
	DEBUG -> REGRESSIVE :: STACK ;
	println ( "TESTE : " , 3 ) ;
	ig . listar ( ) ;
	DEBUG -> REGRESSIVE :: STACK ;
	println ( "TESTE : " , 4 ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . remover ( 10 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . remover ( 40 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . remover ( 60 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . remover ( 15 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . adicionar ( 70 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . remover ( 50 ) ;
	ig . remover ( 20 ) ;
	ig . adicionar ( 15 ) ;
	ig . remover ( 70 ) ;
	ig . remover ( 15 ) ;
	ig . remover ( 30 ) ;
	ig . remover ( 15 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . adicionar ( 5 ) ;
	ig . adicionar ( 2 ) ;
	ig . adicionar ( 3 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . limpar ( ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . adicionar ( 32 ) ;
	ig . listar ( ) ;
	println ( "Quantidade : " , ig . getQuantidade ( ) ) ;
	ig . adicionar ( 40 ) ;
	ig . adicionar ( 12 ) ;
	ig . adicionar ( 60 ) ;
	ig . adicionar ( 87 ) ;
	ig . adicionar ( 90 ) ;
	ig . adicionar ( 100 ) ;
	ig . listar ( ) ;
	println ( "Quantidade LISTA : " , ig . getQuantidade ( ) ) ;
	DEBUG -> REGRESSIVE :: STACK ;
	println ( "DEBUG - " , 0 ) ;
	DEBUG -> REGRESSIVE :: STACK ;
	def iterar : Iterador >> ( Lista >> ( int ) , int ) = init Iterador ( ig ) >> ( Lista >> ( int ) , int ) ;
	println ( "DEBUG - " , 1 ) ;
	iterar . iniciar ( ) ;
	println ( "DEBUG - " , 2 ) ;
	while ( iterar . continuar ( ) ) -> { println ( "-> " , iterar . getValor ( ) ) ; iterar . proximo ( ) ; } println ( "DEBUG - " , 3 ) ;
	 #invoke __COMPILER__ -> SHOW_GLOBAL ( ) :: STACK; #invoke __COMPILER__ -> HEAP ( ) :: ALL;
	}
