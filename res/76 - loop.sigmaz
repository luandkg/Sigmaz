
call iniciar -> operando ( ) ;
act operando ( ) {
	 def a1 : num = 0.0;
	 def raiz : num = 0.0;
	 loop -> {
		 println ("Valor : " , inteiro ( a1 ) );
		 def cc : num = 121.0;
		 cc = somar ( inteiro ( cc ) , raiz );
		 raiz = somar ( raiz , 0.12 );
		 println ("  - Numero : " , cc );
		 println ("  - Inteiro : " , inteiro ( cc ) );
		 println ("  - Decimal : " , decimal ( cc ) );
		 a1 = somar ( a1 , 1.0 );
		 if ( maior ( a1 , 5.0 ) ) -> {
			 cancel;
		}
}
 def aa : num = 12.7;
	 def bb : num = 8.0;
	 def ss : num = somar ( aa , bb );
	 DEBUG -> REGRESSIVE :: STACK;
}

func somar ( a : num , b : num ) : num {
	 reg @ R9 -> a;
	 reg @ R10 -> b;
	 PROC -> {
		 SET R11;
		 MOV 0.0;
		 OPE R9 SAX R10;
	}
 return reg @ R11;
}

act println ( a : string , b : num ) {
	 PROC -> {
		 PROC CHANGE_LINE;
	}
 reg @ R13 -> a;
	 PROC -> {
		 PRINT R13;
	}
 reg @ R9 -> b;
	 PROC -> {
		 SET R13;
		 MOV"";
		 NUM_STRING R9;
		 PRINT R13;
	}
}

func menor ( a : num , b : num ) : bool {
	 reg @ R9 -> a;
	 reg @ R10 -> b;
	 PROC -> {
		 SET R1;
		 MOV FALSE;
		 OPE R9 MOZZ R10;
	}
 return reg @ R1;
}

func maior ( a : num , b : num ) : bool {
	 reg @ R9 -> a;
	 reg @ R10 -> b;
	 PROC -> {
		 SET R1;
		 MOV FALSE;
		 OPE R9 DROEN R10;
	}
 return reg @ R1;
}

func inteiro ( a : num ) : num {
	 reg @ R9 -> a;
	 PROC -> {
		 SET R10;
		 MOV 0.0;
		 NUM_INT R9;
	}
 return reg @ R10;
}

func decimal ( a : num ) : num {
	 reg @ R9 -> a;
	 PROC -> {
		 SET R10;
		 MOV 0.0;
		 NUM_DEC R9;
	}
 return reg @ R10;
}
