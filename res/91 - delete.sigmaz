call Remocao ->  {
	def u1 : Usuario = start Usuario 
		{
			Nome = "Luan" ;
			Idade = 27  ;
		} ;
	def u2 : Usuario = start Usuario 
		{
			Nome = "Alice" ;
			Idade = 34  ;
		} ;
	def u3 : Usuario = start Usuario 
		{
			Nome = "Alex" ;
			Idade = 20  ;
		} ;
	def valor : int = 12  ;
	DEBUG -> LOCAL :: STACK  ;
	DEBUG -> GLOBAL :: INSTANCES  ;
	delete u2  ;
	delete valor  ;
	delete start Usuario 
		{
			Nome = "Bruna" ;
			Idade = 25  ;
		} ;
	DEBUG -> LOCAL :: STACK  ;
	DEBUG -> GLOBAL :: INSTANCES  ;
	def alfa : Objeto = init Objeto ( 12 )  ;
	def vv : int = alfa . getSI ( ) . getGuardado ( )  ;
	def beta : Objeto = init Objeto ( 13 )  ;
	DEBUG -> LOCAL :: STACK  ;
	DEBUG -> GLOBAL :: INSTANCES  ;
	delete alfa  ;
	DEBUG -> LOCAL :: STACK  ;
	DEBUG -> GLOBAL :: INSTANCES  ;
	indo ( )  ;
	indo ( )  ;
	indo ( )  ;
	def aza : ZA = init ZA ( )  ;
}

act indo ( )  {
	def aga : Usuario = start Usuario 
		{
			Nome = "Agatha" ;
			Idade = 52  ;
		} ;
	def eta : Usuario = aga  ;
	def SI2 : SubItem = init SubItem ( )  ;
	def SI3 : SubItem = init SubItem ( )  ;
	DEBUG -> GLOBAL :: INSTANCES  ;
}
type Usuario  {
	define Nome : string = "" ;
	define Idade : int = 0  ;
}
struct Objeto  {
	
	init Objeto ( a : int )  {
		this . mA = a  ;
		this . mSI = init SubItem ( )  ;
		#DEBUG -> STRUCT :: STACK;
	}
	all :
		
		func getSI ( ) : SubItem  {
			return mSI  ;
		}
		
		destruct ->  {
			delete mSI  ;
		}
	restrict :
		define mA : int  ;
		define mSI : SubItem  ;
	all :
		
		func getA ( ) : int  {
			return mA  ;
		}
}
struct SubItem  {
	
	init SubItem ( )  {
		mGuardado = 15  ;
	}
	restrict :
		define mGuardado : int = 0  ;
	all :
		
		func getGuardado ( ) : int  {
			return mGuardado  ;
		}
}
struct ZA with ZE  {
	
	init ZA ( ) -> ZE ( )  {
	}
	restrict :
		define mA : int = 0  ;
	all :
		
		destruct ->  {
			delete mA  ;
		}
}
struct ZE  {
	restrict :
		define mE : int = 0  ;
	all :
		
		destruct ->  {
			delete mE  ;
		}
}