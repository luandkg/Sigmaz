call iniciar -> operando ( );
act operando ( ) {
	def a1 : num = 10.0;
	def a2 : num = 5.0;
	def t : bool = a1 == a2;
	println ( "A1 : : ", a1 );
	println ( "A2 : : ", a2 );
	println ( "");
	if ( t ) -> {
		println ( "Parte : ", "Igual");
	}others {
		println ( "Parte : ", "Diferente");
	}
	def modo : string = "";

	if ( menor ( a1 , a2 ) ) -> {
		modo = "Menor";
	}other ( igual ( a1 , a2 ) ) -> {
		modo = "Igual";
	}others {
		modo = "Maior";
	}
	println ( "Comparacao : ", modo );
	println ( "");
	def cai1 : bool = maior_igual ( 4.0 , 6.0 );
	def cai2 : bool = maior_igual ( 4.0 , 2.0 );
	def cai3 : bool = maior_igual ( 4.0 , 4.0 );
	def cei1 : bool = menor_igual ( 4.0 , 2.0 );
	def cei2 : bool = menor_igual ( 4.0 , 4.0 );
	def cei3 : bool = menor_igual ( 4.0 , 6.0 );
	println ( "Operador Maior Igual");
	println ( "4 >= 6 : ", cai1 );
	println ( "4 >= 2 : ", cai2 );
	println ( "4 >= 4 : ", cai3 );
	println ( "");
	println ( "Operador Menor Igual");
	println ( "4 <= 2 : ", cei1 );
	println ( "4 <= 4 : ", cei2 );
	println ( "4 <= 6 : ", cei3 );
	def CC : bool = ( 10.0 == 12.0 ) == false;
	def w : string = ( "Luan");
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: ALL;
}
func maior_igual ( a : num , b : num ) : bool {
	def c1 : bool;
	def c2 : bool;
	def c3 : bool = false;
	invoke math -> operator_great_num ( a , b ) :: c1;
	invoke math -> operator_equal_num ( a , b ) :: c2;
	if ( c1 ) -> {
		c3 = true;
	}
	if ( c2 ) -> {
		c3 = true;
	}
	return c3;
}
func menor ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_less_num ( a , b ) :: c;
	return c;
}
func menor_igual ( a : num , b : num ) : bool {
	def c1 : bool;
	def c2 : bool;
	invoke math -> operator_less_num ( a , b ) :: c1;
	invoke math -> operator_equal_num ( a , b ) :: c2;
	def c3 : bool = false;
	if ( c1 ) -> {
		c3 = true;
	}
	if ( c2 ) -> {
		c3 = true;
	}
	return c3;
}
func igual ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_equal_num ( a , b ) :: c;
	return c;
}
operator == ( a : num , b : num ) : bool {
	def c : bool;
	invoke math -> operator_equal_num ( a , b ) :: c;
	return c;
}
operator == ( a : bool , b : bool ) : bool {
	def c : bool;
	invoke math -> operator_match ( a , b ) :: c;
	return c;
}

act print ( a : string ) {
	def b : num;
	invoke terminal -> print ( a ) :: b;
}

act println ( a : string ) {
	def b : num;
	invoke terminal -> change ( ) :: b;
	invoke terminal -> print ( a ) :: b;
}

act println ( a : string , b : string ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}

act println ( a : string , b : num ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}

act println ( a : string , b : bool ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
	invoke terminal -> print ( b ) :: c;
}
