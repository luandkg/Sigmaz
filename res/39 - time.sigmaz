call iniciar -> inicio ( );


act inicio ( ) {

	def agora : Tempo = getTempo ( );
	def hora : int = agora.getHora ( );
	def minuto : int = agora.getMinuto ( );
	def segundo : int = agora.getSegundo ( );
	def formatado : string = agora.getFormatado ( );
	def formatado2 : string = getTempo_Formatado ( );
	def formatado3 : string = getData_Formatado ( );
	DEBUG -> REGRESSIVE :: ALL;

}


func int_to_string ( a : int ) : string {
	reg @ R5 -> a;
	PROC -> {
		SET R13;
		MOV "";
		INT_STRING R5;
	}
	return reg @ R13;
}
func string_length ( a : string ) : int {
	reg @ R13 -> a;
	PROC -> {
		SET R5;
		MOV 0;
		SIZE R13;
	}
	return reg @ R5;
}
func string_append ( a : string , b : string ) : int {
	reg @ R13 -> a;
	reg @ R14 -> b;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	return reg @ R13;
}
func string_append ( a : string , b : string , c : string ) : string {
	reg @ R13 -> a;
	reg @ R14 -> b;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> c;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	return reg @ R13;
}
func string_append ( a : string , b : string , c : string , d : string ) : string {
	reg @ R13 -> a;
	reg @ R14 -> b;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> c;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> d;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	return reg @ R13;
}
func string_append ( a : string , b : string , c : string , d : string , e : string ) : string {
	reg @ R13 -> a;
	reg @ R14 -> b;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> c;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> d;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	reg @ R14 -> e;
	PROC -> {
		SET R13;
		APPEND R14;
	}
	return reg @ R13;
}
func menor ( a : int , b : int ) : bool {
	reg @ R5 -> a;
	reg @ R6 -> b;
	PROC -> {
		SET R1;
		MOV FALSE;
		OPE R5 LESS R6;
	}
	return reg @ R1;
}
func getTempo ( ) : Tempo {
	def a : Tempo = init Tempo ( );
	return a;
}
func getTempo_Formatado ( ) : string {
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_SECOND;
	}
	def mSegundo : int = reg @ R5;
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_MINUTE;
	}
	def mMinuto : int = reg @ R5;
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_HOUR;
	}
	def mHora : int = reg @ R5;
	def f1 : string = int_to_string ( mHora );
	def f2 : string = int_to_string ( mMinuto );
	def f3 : string = int_to_string ( mSegundo );
	if ( menor ( string_length ( f1 ) , 2 ) ) -> {
		f1 = string_append ( "0", f1 );
	}
	if ( menor ( string_length ( f2 ) , 2 ) ) -> {
		f2 = string_append ( "0", f2 );
	}
	if ( menor ( string_length ( f3 ) , 2 ) ) -> {
		f3 = string_append ( "0", f3 );
	}
	def formatado : string = string_append ( f1 , ":", f2 , ":", f3 );
	return formatado;
}
func getData_Formatado ( ) : string {
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_DAY;
	}
	def mDia : int = reg @ R5;
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_MONTH;
	}
	def mMes : int = reg @ R5;
	PROC -> {
		SET R5;
		MOV 0;
		PROC CHRONOS_YEAR;
	}
	def mAno : int = reg @ R5;
	def f1 : string = int_to_string ( mDia );
	def f2 : string = int_to_string ( mMes );
	def f3 : string = int_to_string ( mAno );
	if ( menor ( string_length ( f1 ) , 2 ) ) -> {
		f1 = string_append ( "0", f1 );
	}
	if ( menor ( string_length ( f2 ) , 2 ) ) -> {
		f2 = string_append ( "0", f2 );
	}
	def formatado : string = string_append ( f1 , "/", f2 , "/", f3 );
	return formatado;
}

struct Tempo {
	restrict : 
	define mHora : int = 0;
	define mMinuto : int = 0;
	define mSegundo : int = 0;
	all : 
	init Tempo ( h : int , m : int , s : int ) {
		mHora = h;
		mMinuto = m;
		mSegundo = s;
	}
	init Tempo ( ) {
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_SECOND;
		}
		mSegundo = reg @ R5;
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_MINUTE;
		}
		mMinuto = reg @ R5;
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_HOUR;
		}
		mHora = reg @ R5;
	}
	func getHora ( ) : int {
		return mHora;
	}
	func getMinuto ( ) : int {
		return mMinuto;
	}
	func getSegundo ( ) : int {
		return mSegundo;
	}
	func getFormatado ( ) : string {
		def f1 : string = int_to_string ( mHora );
		def f2 : string = int_to_string ( mMinuto );
		def f3 : string = int_to_string ( mSegundo );
		if ( menor ( string_length ( f1 ) , 2 ) ) -> {
			f1 = string_append ( "0", f1 );
		}
		if ( menor ( string_length ( f2 ) , 2 ) ) -> {
			f2 = string_append ( "0", f2 );
		}
		if ( menor ( string_length ( f3 ) , 2 ) ) -> {
			f3 = string_append ( "0", f3 );
		}
		def formatado : string = string_append ( f1 , ":", f2 , ":", f3 );
		return formatado;
	}
	
}

struct Data {
	restrict : 
	define mDia : int = 0;
	define mMes : int = 0;
	define mAno : int = 0;
	all : 
	init Data ( d : int , m : int , a : int ) {
		mDia = d;
		mMes = m;
		mAno = a;
	}
	init Data ( ) {
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_DAY;
		}
		mDia = reg @ R5;
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_MONTH;
		}
		mMes = reg @ R5;
		PROC -> {
			SET R5;
			MOV 0;
			PROC CHRONOS_YEAR;
		}
		mAno = reg @ R5;
	}
	func getDia ( ) : int {
		return mDia;
	}
	func getMes ( ) : int {
		return mMes;
	}
	func getAno ( ) : int {
		return mAno;
	}
	func getFormatado ( ) : string {
		def f1 : string = int_to_string ( mDia );
		def f2 : string = int_to_string ( mMes );
		if ( menor ( string_length ( f1 ) , 2 ) ) -> {
			f1 = string_append ( "0", f1 );
		}
		if ( menor ( string_length ( f2 ) , 2 ) ) -> {
			f2 = string_append ( "0", f2 );
		}
		def formatado : string = string_append ( f1 , "/", f2 , "/", f3 );
		return formatado;
	}
	
}
