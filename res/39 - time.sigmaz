

call iniciar -> inicio();

act inicio(){

    def agora : Tempo = getTempo();

    def hora : num = agora.getHora();
    def minuto : num = agora.getMinuto();
    def segundo : num = agora.getSegundo();

    def formatado : string = agora.getFormatado();

    def formatado2 : string = getTempo_Formatado();
    def formatado3 : string = getData_Formatado();

    invoke __COMPILER__ -> SHOW_SCOPE () :: ALL;

}



func num_to_string(a:num) : string  {

    def c : string;

    invoke casting -> cast_ns (a) :: c;

    return c;
}

func string_length(a:string) : num  {

    def c : num;

    invoke __UTILS__ -> string_length (a) :: c;

    return c;
}


func string_append(a:string,b:string) : string  {

    def ret : string;

    invoke __UTILS__ -> string_append (a,b) :: ret;

    return ret;
}

func string_append(a:string,b:string,c:string) : string  {

    def ret : string;

    invoke __UTILS__ -> string_append (a,b) :: ret;
    invoke __UTILS__ -> string_append (ret,c) :: ret;

    return ret;
}

func string_append(a:string,b:string,c:string,d:string) : string  {

    def ret : string;

    invoke __UTILS__ -> string_append (a,b) :: ret;
    invoke __UTILS__ -> string_append (ret,c) :: ret;
    invoke __UTILS__ -> string_append (ret,d) :: ret;

    return ret;
}

func string_append(a:string,b:string,c:string,d:string,e:string) : string  {

    def ret : string;

    invoke __UTILS__ -> string_append (a,b) :: ret;
    invoke __UTILS__ -> string_append (ret,c) :: ret;
    invoke __UTILS__ -> string_append (ret,d) :: ret;
    invoke __UTILS__ -> string_append (ret,e) :: ret;

    return ret;
}


func menor(a:num,b:num) : bool {

    def c : bool;

    invoke math -> operator_less (a,b) :: c;

    return c;
}

func getTempo() : Tempo {

    def a : Tempo = init Tempo();

    return a;
}


func getTempo_Formatado() : string{

        def mHora : num = 0;
        def mMinuto : num = 0;
        def mSegundo : num = 0;

        invoke __UTILS__ -> Time_getHour () :: mHora;
        invoke __UTILS__ -> Time_getMinute () :: mMinuto;
        invoke __UTILS__ -> Time_getSecond () :: mSegundo;

        def f1 : string =num_to_string(mHora);
        def f2 : string =num_to_string(mMinuto);
        def f3 : string =num_to_string(mSegundo);

         if (menor(string_length(f1),2)) -> { f1 = string_append("0",f1);  }
         if (menor(string_length(f2),2)) -> { f2 = string_append("0",f2);  }
         if (menor(string_length(f3),2)) -> { f3 = string_append("0",f3);  }

        def formatado : string = string_append(f1,":",f2,":",f3);


        return formatado;

}

func getData_Formatado() : string{

          def mDia : num = 0;
            def mMes : num = 0;
            def mAno : num = 0;

      invoke __UTILS__ -> Date_getDay () :: mDia;
               invoke __UTILS__ -> Date_getMonth () :: mMes;
               invoke __UTILS__ -> Date_getYear () :: mAno;

        def f1 : string =num_to_string(mDia);
            def f2 : string =num_to_string(mMes);
            def f3 : string =num_to_string(mAno);

            if (menor(string_length(f1),2)) -> { f1 = string_append("0",f1);  }
            if (menor(string_length(f2),2)) -> { f2 = string_append("0",f2);  }

            def formatado : string = string_append(f1,"/",f2,"/",f3);


            return formatado;

}

struct Tempo {

    restrict :
        define mHora : num = 0;
        define mMinuto : num = 0;
        define mSegundo : num = 0;

    all :
        init Tempo(h:num,m:num,s:num){
            mHora = h;
            mMinuto = m;
            mSegundo = s;
        }

        init Tempo(){
               invoke __UTILS__ -> Time_getHour () :: mHora;
               invoke __UTILS__ -> Time_getMinute () :: mMinuto;
               invoke __UTILS__ -> Time_getSecond () :: mSegundo;
        }

        func getHora() : num { return mHora; }
        func getMinuto() : num { return mMinuto; }
        func getSegundo() : num { return mSegundo; }

        func getFormatado() : string {

            def f1 : string =num_to_string(mHora);
            def f2 : string =num_to_string(mMinuto);
            def f3 : string =num_to_string(mSegundo);

            if (menor(string_length(f1),2)) -> { f1 = string_append("0",f1);  }
            if (menor(string_length(f2),2)) -> { f2 = string_append("0",f2);  }
            if (menor(string_length(f3),2)) -> { f3 = string_append("0",f3);  }

            def formatado : string = string_append(f1,":",f2,":",f3);

            return formatado;

        }
}


struct Data {

    restrict :
        define mDia : num = 0;
        define mMes : num = 0;
        define mAno : num = 0;

    all :
        init Data(d:num,m:num,a:num){
            mDia = d;
            mMes = m;
            mAno = a;
        }

        init Data(){
               invoke __UTILS__ -> Date_getDay () :: mDia;
               invoke __UTILS__ -> Date_getMonth () :: mMes;
               invoke __UTILS__ -> Date_getYear () :: mAno;
        }

        func getDia() : num { return mDia; }
        func getMes() : num { return mMes; }
        func getAno() : num { return mAno; }

        func getFormatado() : string {

            def f1 : string =num_to_string(mDia);
            def f2 : string =num_to_string(mMes);

            if (menor(string_length(f1),2)) -> { f1 = string_append("0",f1);  }
            if (menor(string_length(f2),2)) -> { f2 = string_append("0",f2);  }

            def formatado : string = string_append(f1,"/",f2,"/",f3);


            return formatado;

        }
}

