call iniciar -> vamos_herdar ( );

act vamos_herdar ( ) {
	def a1 : Animal = init Animal ( );
	a1.setIdade ( 12 );
	a1.setQualidade ( "Lindo");
	a1.mostrar ( );

    def f : Fungo = init Fungo(12);

    def g : num = f.Quantidade;

	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;

}

struct Qualidade {
	define qualidade : string = "";

    act setQualidade ( a : string ) {
		qualidade = a;
	}
	func getQualidade ( ) : string {
		return qualidade;
	}
	
}

struct Celula {
	
}

struct Celulas {

	init Celulas (q : num) { Quantidade = q;}

	all :
	    define Quantidade : num = 0;
}

struct Multicelular with Celulas {
	init Multicelular (q : num) -> Celulas(q) {}
}

struct Bacteria with Celula {
	init Bacteria () { }
}

struct Fungo with Multicelular {
	init Fungo (fungo_quantidade:num) -> Multicelular(fungo_quantidade) {}
}

struct Cocos with Bacteria {
	init Cocos () -> Bacteria() {}
}

struct EstreptoCocos with Bacteria {
	init EstreptoCocos () -> Bacteria() {}
}

struct Animal with Qualidade {

	define idade : num = 0;

    act setIdade ( a : num ) {
		idade = a;
	}

	act mostrar ( ) {
		println ( " --- ANIMAL --- ");
		println ( "");
		println ( "     - IDADE : ", idade );
		println ( "     - QUALIDADE : ", qualidade );
	}
	func somar_inteiro ( a : num , b : num ) : num {
		def c : num;
		invoke math -> operator_sum ( a , b ) :: c;
		invoke casting -> cast_integer ( c ) :: c;
		return c;
	}
	func menor ( a : num , b : num ) : bool {
		def c : bool;
		invoke math -> operator_less ( a , b ) :: c;
		return c;
	}

	act println ( a : string , b : num ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
		invoke terminal -> print ( b ) :: c;
	}

	act println ( a : string , b : string ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
		invoke terminal -> print ( b ) :: c;
	}

	act println ( a : string ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
	}
	
}


struct Base {

    init Base (a : num) { }
    all :
        define SAL : num = 0;
        define BOC : num = 12;
        mockiz VEZ : num = 15;
}

struct ItemBase with Base {

    init ItemBase () -> Base (a) {  }

}