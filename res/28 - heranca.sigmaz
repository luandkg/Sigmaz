call iniciar -> vamos_herdar ( );
act vamos_herdar ( ) {
	escrever ( "Executando 1");
	def a1 : Animal = init Animal ( );
	escrever ( "Executando 2");
	a1.setIdade ( 12 );
	a1.setQualidade ( "Lindo");
	a1.mostrar ( );
	def f : Fungo = init Fungo ( 12 );
	def g : int = f.Quantidade;
	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;
}

struct Qualidade {
	define qualidade : string = "";
	act setQualidade ( a : string ) {
		qualidade = a;
	}
	func getQualidade ( ) : string {
		return qualidade;
	}
	
}

struct Celula {
	
}

struct Celulas {
	init Celulas ( q : int ) {
		Quantidade = q;
	}
	all : 
	define Quantidade : int = 0;
}

struct Multicelular with Celulas {
	init Multicelular ( q : int ) -> Celulas ( q ) {
		
	}
	
}

struct Bacteria with Celula {
	init Bacteria ( q : int ) -> Celula ( ) {
		
	}
	
}

struct Fungo with Multicelular {
	init Fungo ( fungo_quantidade : int ) -> Multicelular ( fungo_quantidade ) {
		
	}
	
}

struct Cocos with Bacteria {
	init Cocos ( q : int ) -> Bacteria ( q ) {
		
	}
	
}

struct EstreptoCocos with Bacteria {
	init EstreptoCocos ( a : int ) -> Bacteria ( q ) {
		
	}
	
}

struct Animal with Qualidade {
	define idade : int = 0;
	init Animal ( ) -> Qualidade ( ) {
		
	}

	act setIdade ( a : int ) {
		idade = a;
	}

	act mostrar ( ) {
		println ( " --- ANIMAL --- ");
		println ( "");
		println ( "     - IDADE : ", idade );
		println ( "     - QUALIDADE : ", qualidade );
	}
	func somar_inteiro ( a : int , b : int ) : int {
		def c : num;
		invoke math -> operator_sum_int ( a , b ) :: c;
		invoke casting -> cast_integer_int ( c ) :: c;
		return c;
	}
	func menor ( a : int , b : int ) : bool {
		def c : bool;
		invoke math -> operator_less_int ( a , b ) :: c;
		return c;
	}

	act println ( a : string , b : int ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
		invoke terminal -> print ( b ) :: c;
	}

	act println ( a : string , b : string ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
		invoke terminal -> print ( b ) :: c;
	}

	act println ( a : string ) {
		def c : num;
		invoke terminal -> change ( ) :: c;
		invoke terminal -> print ( a ) :: c;
	}
	
}

struct Base {
	init Base ( a : int ) {
		
	}
	all : 
	define SAL : int = 0;
	define BOC : int = 12;
	mockiz VEZ : int = 15;
}

struct ItemBase with Base {
	init ItemBase ( ) -> Base ( a ) {
		
	}
	
}

act escrever ( a : string ) {
	def c : num;
	invoke terminal -> change ( ) :: c;
	invoke terminal -> print ( a ) :: c;
}
