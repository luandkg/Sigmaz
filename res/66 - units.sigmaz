import "libs/lib.sigmaz";

refer TesteUnitario;


call iniciar -> {


	println ( " --------- TESTES UNITARIOS --------- ");
	println ( "");

	def AssertC : Assert = init Assert ( );
	AssertC.testar ( "Teste 1", true );
	AssertC.testar ( "Teste 2", true );
	AssertC.testar ( "Teste 3", false );

    AssertC.listar();

	AssertC.limpar ( );
	
	#invoke __COMPILER__ -> HEAP ( ) :: ALL;


    #def ASSERTABLE : Lista >> ( ASSERT_ITEM ) = AssertC.ASSERTABLE;

	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;



}
package TesteUnitario {

	refer Lista;

	type Assertiva {
		define nome : string = "";
		define resultado : bool = false;
	}

	struct Assert {

	    restrict:
		    define Assertivas : Lista >> ( Assertiva ) = init Lista ( ) >> ( Assertiva );

        all:

		act limpar ( ) {
			each a : Assertiva :: ( Assertivas ) -> {
				trash ( a );
			}
			Assertivas.limpar ( );
		}

		act testar ( teste : string , a : bool ) {

		    def aa : Assertiva = start Assertiva {
                                   				nome = teste;
                                   				resultado = a;
                                   			};
            #invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;

			Assertivas.adicionar ( aa);
		}


		act listar(){

			each AssertivaC : Assertiva :: ( Assertivas ) -> {
        		println ( "ASSERT : ", AssertivaC.nome , " -->> ", AssertivaC.resultado );
        	}

		}
		
	}
	
}
