


call iniciar -> operando ( );


act operando ( ) {



    def axa : int = XA -> mValor;

    XA -> aumentar();
    XA -> aumentar();
    XA -> aumentar();

    def axb : int = XA -> mValor;

    extern_refered<XA> XA_VALOR :: mValor;


	invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;

}

struct XA{

   extern:

        define mValor : int = 0;

        act aumentar() {

            extern_refered<XA> AQUI_VALOR :: mValor;

            AQUI_VALOR = AQUI_VALOR ++ 1;

            invoke __COMPILER__ -> SHOW_SCOPE ( ) :: STACK;

        }

}


operator ++ ( a : int , b : int ) : int {
	def c : int = 0;
	invoke math -> operator_sum_int ( a , b ) :: c;
	return c;
}

operator ** ( a : int , b : int ) : int {
	def c : int = 0;
	invoke math -> operator_mux_int ( a , b ) :: c;
	return c;
}

func somar( a : int , b : int ) : int {
	def c : int = 0;
	invoke math -> operator_sum_int ( a , b ) :: c;
	return c;
}